{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-1c45890b26bb8ef0b08b2da963bfafe153c4e2a0",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Voting.sol": "project/contracts/Voting.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/Voting.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Voting is Ownable {\r\n    struct Election {\r\n        uint256 id;\r\n        bool isActive;\r\n        address[] candidates;\r\n        mapping(address => bool) isCandidate;\r\n        mapping(address => uint256) votesCount;\r\n        mapping(address => bool) hasVoted;\r\n        // ADD: whitelist\r\n        mapping(address => bool) isWhitelisted;\r\n    }\r\n\r\n    uint256 public currentElectionId;\r\n    mapping(uint256 => Election) private elections;\r\n\r\n    event ElectionCreated(uint256 indexed electionId);\r\n    event CandidateRegistered(uint256 indexed electionId, address candidate);\r\n    event VoteCast(\r\n        uint256 indexed electionId,\r\n        address voter,\r\n        address candidate\r\n    );\r\n    event ElectionEnded(uint256 indexed electionId);\r\n    // ADD: events\r\n    event VoterWhitelisted(uint256 indexed electionId, address voter);\r\n    event VoterWhitelistRemoved(uint256 indexed electionId, address voter);\r\n\r\n    constructor(address initialOwner) Ownable(initialOwner) {}\r\n\r\n    // ðŸ”¹ IMPROVEMENT: Add check to prevent creating election when one is active\r\n    function createElection() external onlyOwner {\r\n        // Prevent creating new election if current one is still active\r\n        if (currentElectionId > 0) {\r\n            require(\r\n                !elections[currentElectionId].isActive,\r\n                \"An election is already active\"\r\n            );\r\n        }\r\n\r\n        currentElectionId++;\r\n        Election storage e = elections[currentElectionId];\r\n        e.id = currentElectionId;\r\n        e.isActive = true;\r\n\r\n        emit ElectionCreated(currentElectionId);\r\n    }\r\n\r\n    // ðŸ”¹ IMPROVEMENT: Add validation for zero address\r\n    function registerCandidate(address candidateWallet) external onlyOwner {\r\n        require(candidateWallet != address(0), \"Invalid candidate address\");\r\n        require(currentElectionId > 0, \"No election created yet\");\r\n\r\n        Election storage e = elections[currentElectionId];\r\n        require(e.isActive, \"No active election\");\r\n        require(!e.isCandidate[candidateWallet], \"Candidate already exists\");\r\n\r\n        e.candidates.push(candidateWallet);\r\n        e.isCandidate[candidateWallet] = true;\r\n        e.votesCount[candidateWallet] = 0;\r\n\r\n        emit CandidateRegistered(currentElectionId, candidateWallet);\r\n    }\r\n\r\n    // ðŸ”¹ IMPROVEMENT: Add validation and better error messages\r\n    function vote(address candidateWallet) external {\r\n        require(candidateWallet != address(0), \"Invalid candidate address\");\r\n        require(currentElectionId > 0, \"No election created yet\");\r\n        Election storage e = elections[currentElectionId];\r\n        require(e.isActive, \"No active election\");\r\n        require(e.isCandidate[candidateWallet], \"Candidate not registered\");\r\n        require(e.isWhitelisted[msg.sender], \"Voter not whitelisted\"); // <â€”\r\n        require(!e.hasVoted[msg.sender], \"Already voted\");\r\n\r\n        e.votesCount[candidateWallet]++;\r\n        e.hasVoted[msg.sender] = true;\r\n\r\n        emit VoteCast(currentElectionId, msg.sender, candidateWallet);\r\n    }\r\n\r\n    // ðŸ”¹ IMPROVEMENT: Add validation\r\n    function endElection() external onlyOwner {\r\n        require(currentElectionId > 0, \"No election created yet\");\r\n\r\n        Election storage e = elections[currentElectionId];\r\n        require(e.isActive, \"No active election\");\r\n\r\n        e.isActive = false;\r\n        emit ElectionEnded(currentElectionId);\r\n    }\r\n\r\n    // ðŸ”¹ IMPROVEMENT: Add validation for election existence\r\n    function getCandidates(\r\n        uint256 electionId\r\n    ) external view returns (address[] memory) {\r\n        require(\r\n            electionId > 0 && electionId <= currentElectionId,\r\n            \"Invalid election ID\"\r\n        );\r\n        return elections[electionId].candidates;\r\n    }\r\n\r\n    function getAllCandidatesWithVotes(\r\n        uint256 electionId\r\n    ) public view returns (address[] memory, uint256[] memory) {\r\n        require(\r\n            electionId > 0 && electionId <= currentElectionId,\r\n            \"Invalid election ID\"\r\n        );\r\n\r\n        Election storage e = elections[electionId];\r\n        uint256 len = e.candidates.length;\r\n        uint256[] memory votes = new uint256[](len);\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            votes[i] = e.votesCount[e.candidates[i]];\r\n        }\r\n        return (e.candidates, votes);\r\n    }\r\n\r\n    function isCandidate(\r\n        uint256 electionId,\r\n        address wallet\r\n    ) external view returns (bool) {\r\n        if (electionId == 0 || electionId > currentElectionId) return false;\r\n        return elections[electionId].isCandidate[wallet];\r\n    }\r\n\r\n    function hasVoted(\r\n        uint256 electionId,\r\n        address wallet\r\n    ) external view returns (bool) {\r\n        if (electionId == 0 || electionId > currentElectionId) return false;\r\n        return elections[electionId].hasVoted[wallet];\r\n    }\r\n\r\n    // ðŸ”¹ NEW: Helper function to check if current election is active\r\n    function isCurrentElectionActive() external view returns (bool) {\r\n        if (currentElectionId == 0) return false;\r\n        return elections[currentElectionId].isActive;\r\n    }\r\n\r\n    // ðŸ”¹ NEW: Get current election candidates (convenience function)\r\n    function getCurrentCandidates() external view returns (address[] memory) {\r\n        require(currentElectionId > 0, \"No election created yet\");\r\n        return elections[currentElectionId].candidates;\r\n    }\r\n\r\n    // ðŸ”¹ NEW: Get current election candidates with votes\r\n    function getCurrentCandidatesWithVotes()\r\n        external\r\n        view\r\n        returns (address[] memory, uint256[] memory)\r\n    {\r\n        require(currentElectionId > 0, \"No election created yet\");\r\n        return getAllCandidatesWithVotes(currentElectionId);\r\n    }\r\n\r\n    // ADD: whitelist single\r\n    function whitelistVoter(address voter) external onlyOwner {\r\n        require(voter != address(0), \"Invalid voter\");\r\n        require(currentElectionId > 0, \"No election created yet\");\r\n        Election storage e = elections[currentElectionId];\r\n        require(e.isActive, \"No active election\");\r\n        e.isWhitelisted[voter] = true;\r\n        emit VoterWhitelisted(currentElectionId, voter);\r\n    }\r\n\r\n    // ADD: whitelist many\r\n    function whitelistVoters(address[] calldata voters) external onlyOwner {\r\n        require(currentElectionId > 0, \"No election created yet\");\r\n        Election storage e = elections[currentElectionId];\r\n        require(e.isActive, \"No active election\");\r\n        for (uint256 i = 0; i < voters.length; i++) {\r\n            address v = voters[i];\r\n            if (v != address(0)) {\r\n                e.isWhitelisted[v] = true;\r\n                emit VoterWhitelisted(currentElectionId, v);\r\n            }\r\n        }\r\n    }\r\n\r\n    // ADD: remove whitelist\r\n    function removeWhitelistedVoter(address voter) external onlyOwner {\r\n        require(voter != address(0), \"Invalid voter\");\r\n        require(currentElectionId > 0, \"No election created yet\");\r\n        Election storage e = elections[currentElectionId];\r\n        require(e.isActive, \"No active election\");\r\n        e.isWhitelisted[voter] = false;\r\n        emit VoterWhitelistRemoved(currentElectionId, voter);\r\n    }\r\n\r\n    // ADD: view check\r\n    function isWhitelisted(\r\n        uint256 electionId,\r\n        address voter\r\n    ) external view returns (bool) {\r\n        if (electionId == 0 || electionId > currentElectionId) return false;\r\n        return elections[electionId].isWhitelisted[voter];\r\n    }\r\n}\r\n"
      }
    }
  }
}